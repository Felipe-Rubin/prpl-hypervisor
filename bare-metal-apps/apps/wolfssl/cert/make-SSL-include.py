#!/usr/bin/python

#Copyright (c) 2016, prpl Foundation
#
#Permission to use, copy, modify, and/or distribute this software for any purpose with or without 
#fee is hereby granted, provided that the above copyright notice and this permission notice appear 
#in all copies.
#
#THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
#INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE 
#FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
#LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, 
#ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
#This code was written by Carlos Moratelli at Embedded System Group (GSE) at PUCRS/Brazil.

import codecs
import os

listOfFiles = [ "cert.pem", "privkey.pem" ];

def  write_permission(output):
	output.write("""/*
Copyright (c) 2016, prpl Foundation

Permission to use, copy, modify, and/or distribute this software for any purpose with or without 
fee is hereby granted, provided that the above copyright notice and this permission notice appear 
in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE 
FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, 
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

This code was written by Carlos Moratelli at Embedded System Group (GSE) at PUCRS/Brazil.

*/

""")

#Write the C header file 
def write_header(output):
	write_permission(output)
	
	output.write("""
// THIS FILE IS AUTOMATICALLY GENERATED.
// MODIFY html-sources/make-SSL-include.py INSTEAD OF THIS.

#ifndef SSL_CERT_H_
#define SSL_CERT_H_

""")
	

#Write the C file 
def write_cert(output, path):
	write_header(output)
	
	hex_encoder = codecs.getencoder('hex')
	
	bin_handle = open(path + listOfFiles[0],'rb')
	output.write("const unsigned char cert_pem_2048[] = {\n    " )
	count = 0
	while(1):
		c = bin_handle.read(1)
		if not c: 
			break
		output.write("0x%s, " % (hex_encoder(c)[0].decode(), ))
		count+=1
		if (count % 16 == 0):
			output.write("\n    ")

	output.write("\n};\n\n")
	bin_handle.close()

	bin_handle = open(path + listOfFiles[1],'rb')
	output.write("const unsigned char privkey_pem_2048[] = {\n    ")
	count = 0
	while(1):
		c = bin_handle.read(1)
		if not c: 
			break
		output.write("0x%s, " % (hex_encoder(c)[0].decode(), ))
		count+=1
		if (count % 16 == 0):
			output.write("\n    ")

	output.write("\n};\n\n")
	
	output.write("#endif\n")
	bin_handle.close()

local_path = os.path.dirname(os.path.realpath(__file__)) + '/'
print local_path

try:
	cert_file = open(local_path + "../SSL_cert.h", 'w')
except:
	print("Failed to open files for writing!")
	exit()


write_cert(cert_file, local_path)

cert_file.close()



