import xml.etree.ElementTree as ET
import sys
import io

def initial_msg(file):
    file.write("/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY IT. */\n\n")

def debug_flags(str, file):
    file.write('/* Debug UART prints */\n')
    for i in str.split():
        file.write('#define %s\n' % i)
    file.write('\n')
    file.write('/* Hypervisor kernel configuration and board info */\n')
    
def platform(root, file):
    for child in root:
        if child.tag == 'platform_string':
            file.write('#define CPU_ARCH \"%s\"\n' % child.text)
        if child.tag == 'system_clock':
            file.write('#define CPU_FREQ %s\n' % child.text)
        if child.tag == 'uart_speed':
            file.write('#define UART_SPEED %s\n' % child.text)


def process_system(root, file):
    for child in root:
        if child.tag == 'debug':
            debug_flags(child.text, file)
        if child.tag == 'cpu':
            file.write('#define CPU_ID %s\n' % child.tag)
        if child.tag == 'platform':
            platform(child, file)
        if child.tag == 'scheduler_quantum_ms':
            file.write('#define MILISECOND (100000000 / 1000)\n')
            file.write ('#define QUANTUM  (%s * MILISECOND)\n' % child.text)
        if child.tag == 'heap_size_bytes':
            file.write ('#define HEAP_SIZE %s\n' % child.text)
        if child.tag == 'heap_address':
            file.write ('#define HEAP_ADDRESS %s\n' % child.text)
    file.write ('\n')

            
def conf_vms(root,file):
    
    for child in root:
        if child.tag == 'vm_data':
            pass
            

    

tree = ET.parse('../config.xml')
root = tree.getroot()

conf_file = open("../config.h", "w")
initial_msg(conf_file)

for child in root:
    if child.tag == 'system':
        process_system(child, conf_file)
    if child.tag == 'virtual_machines':
        conf_vms(child, conf_file)
        
conf_file.close()
